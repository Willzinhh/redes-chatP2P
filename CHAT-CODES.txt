- Endereço: C:\Users\aluno\Desktop\nicole\redes\redes-chatP2P\pom.xml:
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>br.ufsm.poli.csi.redes</groupId>
    <artifactId>chat-redes-2024</artifactId>
    <version>1.0-SNAPSHOT</version>

    <properties>
        <maven.compiler.source>21</maven.compiler.source>
        <maven.compiler.target>21</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.40</version>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>2.13.3</version>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.30</version>
            <scope>provided</scope>
        </dependency>
    </dependencies>

</project>

- Endereço: C:\Users\aluno\Desktop\nicole\redes\redes-chatP2P\.idea\compiler.xml:
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CompilerConfiguration">
    <annotationProcessing>
      <profile default="true" name="Default" enabled="true" />
      <profile name="Maven default annotation processors profile" enabled="true">
        <sourceOutputDir name="target/generated-sources/annotations" />
        <sourceTestOutputDir name="target/generated-test-sources/test-annotations" />
        <outputRelativeToContentRoot value="true" />
        <module name="chat-redes-2024" />
      </profile>
    </annotationProcessing>
  </component>
</project>.
.
- Endereço: C:\Users\aluno\Desktop\nicole\redes\redes-chatP2P\.idea\encodings.xml:
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="Encoding">
    <file url="file://$PROJECT_DIR$/src/main/java" charset="UTF-8" />
    <file url="file://$PROJECT_DIR$/src/main/resources" charset="UTF-8" />
  </component>
</project>.
.
- Endereço: C:\Users\aluno\Desktop\nicole\redes\redes-chatP2P\.idea\jarRepositories.xml:
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="RemoteRepositoriesConfiguration">
    <remote-repository>
      <option name="id" value="central" />
      <option name="name" value="Central Repository" />
      <option name="url" value="https://repo.maven.apache.org/maven2" />
    </remote-repository>
    <remote-repository>
      <option name="id" value="central" />
      <option name="name" value="Maven Central repository" />
      <option name="url" value="https://repo1.maven.org/maven2" />
    </remote-repository>
    <remote-repository>
      <option name="id" value="jboss.community" />
      <option name="name" value="JBoss Community repository" />
      <option name="url" value="https://repository.jboss.org/nexus/content/repositories/public/" />
    </remote-repository>
  </component>
</project>.
.
- Endereço: C:\Users\aluno\Desktop\nicole\redes\redes-chatP2P\.idea\misc.xml:
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ExternalStorageConfigurationManager" enabled="true" />
  <component name="MavenProjectsManager">
    <option name="originalFiles">
      <list>
        <option value="$PROJECT_DIR$/pom.xml" />
      </list>
    </option>
  </component>
  <component name="ProjectRootManager" version="2" languageLevel="JDK_21" default="true" project-jdk-name="temurin-21" project-jdk-type="JavaSDK">
    <output url="file://$PROJECT_DIR$/out" />
  </component>
</project>.
.
- Endereço: C:\Users\aluno\Desktop\nicole\redes\redes-chatP2P\.idea\vcs.xml:
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="VcsDirectoryMappings">
    <mapping directory="" vcs="Git" />
  </component>
</project>.
.
- Endereço: C:\Users\aluno\Desktop\nicole\redes\redes-chatP2P\.idea\workspace.xml:
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="e07e0532-15e6-4389-ab46-2ab3e3d52724" name="Changes" comment="">
      <change beforePath="$PROJECT_DIR$/src/main/java/br/ufsm/poli/csi/redes/service/UDPServiceImpl.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/br/ufsm/poli/csi/redes/service/UDPServiceImpl.java" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Class" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="ProjectColorInfo">{
  &quot;associatedIndex&quot;: 6
}</component>
  <component name="ProjectId" id="33QZSsD8pPtxCmMv4PANBqQobx9" />
  <component name="ProjectLevelVcsManager">
    <ConfirmationsSetting value="1" id="Add" />
  </component>
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent"><![CDATA[{
  "keyToString": {
    "Application.Main.executor": "Run",
    "RunOnceActivity.ShowReadmeOnStart": "true",
    "RunOnceActivity.git.unshallow": "true",
    "git-widget-placeholder": "main",
    "kotlin-language-version-configured": "true",
    "last_opened_file_path": "C:/Users/aluno/Desktop/nicole/redes/redes-chatP2P",
    "node.js.detected.package.eslint": "true",
    "node.js.detected.package.tslint": "true",
    "node.js.selected.package.eslint": "(autodetect)",
    "node.js.selected.package.tslint": "(autodetect)",
    "nodejs_package_manager_path": "npm",
    "project.structure.last.edited": "Project",
    "project.structure.proportion": "0.0",
    "project.structure.side.proportion": "0.0",
    "settings.editor.selected.configurable": "preferences.lookFeel",
    "vue.rearranger.settings.migration": "true"
  }
}]]></component>
  <component name="SharedIndexes">
    <attachedChunks>
      <set>
        <option value="bundled-jdk-9823dce3aa75-125ca727e0f0-intellij.indexing.shared.core-IU-243.24978.46" />
        <option value="bundled-js-predefined-d6986cc7102b-76f8388c3a79-JavaScript-IU-243.24978.46" />
      </set>
    </attachedChunks>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="e07e0532-15e6-4389-ab46-2ab3e3d52724" name="Changes" comment="" />
      <created>1759251258801</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1759251258801</updated>
      <workItem from="1759251259965" duration="5973000" />
      <workItem from="1759862842588" duration="38000" />
      <workItem from="1759863430325" duration="845000" />
      <workItem from="1759864393627" duration="1432000" />
    </task>
    <servers />
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="3" />
  </component>
</project>.
.
- Endereço: C:\Users\aluno\Desktop\nicole\redes\redes-chatP2P\src\main\java\br\ufsm\poli\csi\redes\Main.java:
package br.ufsm.poli.csi.redes;

import br.ufsm.poli.csi.redes.swing.ChatClientSwing;

import java.net.UnknownHostException;

public class Main {
    public static void main(String[] args) throws UnknownHostException {
        new ChatClientSwing();
    }
}.
.
- Endereço: C:\Users\aluno\Desktop\nicole\redes\redes-chatP2P\src\main\java\br\ufsm\poli\csi\redes\model\Mensagem.java:
package br.ufsm.poli.csi.redes.model;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@Builder
@AllArgsConstructor
@NoArgsConstructor
public class Mensagem {
    private TipoMensagem tipoMensagem;
    private String usuario;
    private String status;
    private String msg;

    public enum TipoMensagem {
        sonda, msg_individual, fim_chat, msg_grupo
    }
}
.
.
- Endereço: C:\Users\aluno\Desktop\nicole\redes\redes-chatP2P\src\main\java\br\ufsm\poli\csi\redes\model\Usuario.java:
package br.ufsm.poli.csi.redes.model;

import br.ufsm.poli.csi.redes.swing.ChatClientSwing;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.net.InetAddress;

@Data //get(), set(), toString(), equals(), hashCode()
@AllArgsConstructor
@NoArgsConstructor
public class Usuario {

    private String nome;
    private StatusUsuario status;
    private InetAddress endereco;


    //2 objetos Usuario sao iguais se tiverem o mesmo nome
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Usuario usuario = (Usuario) o;
        return nome.equals(usuario.nome);
    }

    @Override
    public int hashCode() {
        return nome.hashCode();
    }

    public String toString() {
        return this.getNome() + " (" + getStatus().toString() + ")";
    }

    //enum -- define um conjunto de constantes
    public enum StatusUsuario {
        DISPONIVEL, NAO_PERTURBE, VOLTO_LOGO
    }

}
.
.
- Endereço: C:\Users\aluno\Desktop\nicole\redes\redes-chatP2P\src\main\java\br\ufsm\poli\csi\redes\service\UDPService.java:
package br.ufsm.poli.csi.redes.service;
import br.ufsm.poli.csi.redes.model.Usuario;

//define as ações de rede que a interface gráfica ChatClientSwing pode pedir
public interface UDPService {

    /**
     * Envia uma mensagem para um destinatário
     * @param mensagem
     * @param destinatario
     * @param chatGeral
     */
    void enviarMensagem(String mensagem, Usuario destinatario, boolean chatGeral);

    /**
     * Notifica que o próprio usuário foi alterado
     * @param usuario
     */
    void usuarioAlterado(Usuario usuario);

    /**
     * Adiciona um listener para indicar o recebimento de mensagens
     * @param listener
     */
    void addListenerMensagem(UDPServiceMensagemListener listener);

    /**
     * Adiciona um listener para indicar recebimento e/ou alterações em usuários
     * @param listener
     */
    void addListenerUsuario(UDPServiceUsuarioListener listener);


}
.
.
- Endereço: C:\Users\aluno\Desktop\nicole\redes\redes-chatP2P\src\main\java\br\ufsm\poli\csi\redes\service\UDPServiceImpl.java:
package br.ufsm.poli.csi.redes.service;

import br.ufsm.poli.csi.redes.model.Mensagem;
import br.ufsm.poli.csi.redes.model.Usuario;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import netscape.javascript.JSObject;
import org.w3c.dom.ls.LSOutput;

import javax.xml.crypto.Data;
import java.io.IOException;
import java.net.*;

/*
 * criar DatagramSocket
 * montar DatagramPacket
 * chamar socket.send()
 * receive()
 * broadcast para descobrir usuarios
 * mensagem de sonda afeta usuario listener - tem lista de usuarios na classe
 * */

//mensagem na interface --> chama essa classe
public class UDPServiceImpl implements UDPService {
    //atributos
    private DatagramSocket dtSocket;
    private final int porta = 8080;
    private Usuario usuario = null;


    //construtor
    public UDPServiceImpl() {
        try {
            //cria um socket
            this.dtSocket = new DatagramSocket(porta);
            System.out.println("UDPServiceImpl estabeleciado na porta: " + this.porta);

            //threads
//            while (true) {
                new Thread(new EnviaSonda()).start();
                new Thread(new EscutaSonda()).start();
//            }

        } catch (SocketException e) {
            throw new RuntimeException("ERRO ao estabelecer serviço UDP", e);
        }

    }


    //thread de enviar sonda
    private class EnviaSonda implements Runnable {
        @Override
        public void run() {
            System.out.println("entrou no run da classe EnviaSonda");
            while (true) {
                System.out.println("entrou no while true do run da classe EnviaSonda");
                if (usuario == null) {
                    System.out.println("usuario == null");
                    continue;
                }
                //manda sonda
                Mensagem mensagem = new Mensagem();
                mensagem.setTipoMensagem(Mensagem.TipoMensagem.sonda);
                mensagem.setUsuario(usuario.getNome());
                mensagem.setStatus(usuario.getStatus().toString());
                //converte para string
                ObjectMapper mapper = new ObjectMapper();
                String strMensagem = null;
                try {
                    strMensagem = mapper.writeValueAsString(mensagem);
                } catch (JsonProcessingException e) {
                    throw new RuntimeException(e);
                }
                //converte para byte
                byte[] bMensagem = strMensagem.getBytes();

                //manda packet
                DatagramPacket pacote = null;
                for (int i = 1; i < 255; i++) {
                    System.out.println("entoru no for ENVIA\n");
                    try {
                        System.out.println("entrou no try ENVIA");
                        pacote = new DatagramPacket(
                                bMensagem, bMensagem.length,
                                InetAddress.getByName("192.168.83." + i),
                                8080
                        );
                    } catch (UnknownHostException e) {
                        throw new RuntimeException(e);
                    }
                    DatagramSocket socket = null;
                    try {
                        socket = new DatagramSocket();
                    } catch (SocketException e) {
                        throw new RuntimeException(e);
                    }
                    try {
                        socket.send(pacote);
                    } catch (IOException e) {
                        throw new RuntimeException(e);
                    }
                }
                try {
                    Thread.sleep(5000); //envia sonda a cada 5s
                } catch (InterruptedException e) {
                    throw new RuntimeException(e);
                }
                System.out.println("FIM do while true ENVIA sonda");
            }
        }
    }


    //thread de escutar
    private class EscutaSonda implements Runnable {
        @Override
        public void run() {
            System.out.println("entrou no run da classe ESCUTA Sonda");
            try {
                while (true) {
                    System.out.println("entrou no while true do ESCUTA");
                    //buffer vazio para receber dados da rede
                    byte[] buffer = new byte[1024]; //4096
                    DatagramPacket pacoteRecebido = new DatagramPacket(buffer, buffer.length);

                    //espera pacote chegar na 8080
                    try {
                        dtSocket.receive(pacoteRecebido);
                        System.out.println("entrou no try pacote recebido ESCUTA");
                    } catch (IOException e) {
                        throw new RuntimeException(e);
                    }

                    //converte bytes para string json
                    String jsonRecebido = new String(pacoteRecebido.getData(), 0, pacoteRecebido.getLength()); //pega apenas o conteudo da mensagem

                    //converte string json para mensagem de volta
                    ObjectMapper mapper = new ObjectMapper();
                    try {
                        System.out.println("entrou no try depois de ObjectMapper ESCUTA");
                        Mensagem msg = mapper.readValue(jsonRecebido, Mensagem.class);
                    } catch (JsonProcessingException e) {
                        throw new RuntimeException(e);
                    }


                }
                } catch(Exception e){
                e.printStackTrace();
                }
            }
    }


    @Override
    public void enviarMensagem(String mensagem, Usuario destinatario, boolean chatGeral) {
        System.out.println("função enviarMensagem");

    }

//    private Usuario usuario = null; //referencia o usuario atual

    @Override
    public void usuarioAlterado(Usuario usuario) {
        this.usuario = usuario;
        System.out.println("função usuarioAlterado");
        //chama sempre que mandar uma osnda
    }

//    private UDPServiceMensagemListener mensagemListener = null;

    @Override
    public void addListenerMensagem(UDPServiceMensagemListener listener) {
        //"esse eh o meu listener, quando receber mensagem me chama por aqui"
        //listeners para notificar a interface
        System.out.println("função addListenerMensagem");
        void mensagemRecebida(String mensagem, Usuario remetente, boolean chatGeral)
    }

//    private UDPServiceUsuarioListener usuarioListener = null;

    @Override
    public void addListenerUsuario(UDPServiceUsuarioListener listener) {
        System.out.println("função addListenerUsuario");

        void usuarioAdicionado(Usuario usuario)

        void usuarioRemovido(Usuario usuario)

        void usuarioAlterado(Usuario usuario)
    }
}
.
.
- Endereço: C:\Users\aluno\Desktop\nicole\redes\redes-chatP2P\src\main\java\br\ufsm\poli\csi\redes\service\UDPServiceMensagemListener.java:
package br.ufsm.poli.csi.redes.service;

import br.ufsm.poli.csi.redes.model.Usuario;

/* avisos sobre mensagens
 * qualquer classe que queira ouvir mensagens deve ter o metodo mensagemRecebida
 * comunicação entre camada de rede e interface gráfica (rede avisa a interface que recebeu uma mensgaem)
 */
public interface UDPServiceMensagemListener {

    /**
     * Notifica que uma mensagem foi recebida
     * @param mensagem
     * @param remetente
     * @param chatGeral
     */
    void mensagemRecebida(String mensagem, Usuario remetente, boolean chatGeral);

}
.
.
- Endereço: C:\Users\aluno\Desktop\nicole\redes\redes-chatP2P\src\main\java\br\ufsm\poli\csi\redes\service\UDPServiceUsuarioListener.java:
package br.ufsm.poli.csi.redes.service;

import br.ufsm.poli.csi.redes.model.Usuario;

/* avisos sobre usuarios
 * qualquer classe que queira ouvir atualizações de usuarios deve ter os metodos usuarioAdicionado, usuarioRemovido e usuarioAlterado
 * comunicação entre camada de rede e interface gráfica (rede avisa a interface sobre mudanças na lista de usuarios)
 */
public interface UDPServiceUsuarioListener {

    /**
     * Notifica que um usuário foi adicionado
     * @param usuario
     */
    void usuarioAdicionado(Usuario usuario);

    /**
     * Notifica que um usuário foi removido
     * @param usuario
     */
    void usuarioRemovido(Usuario usuario);

    /**
     * Notifica que um usuário foi alterado
     * @param usuario
     */
    void usuarioAlterado(Usuario usuario);

}
.
.
- Endereço: C:\Users\aluno\Desktop\nicole\redes\redes-chatP2P\src\main\java\br\ufsm\poli\csi\redes\swing\ChatClientSwing.java:
package br.ufsm.poli.csi.redes.swing;

import br.ufsm.poli.csi.redes.model.Usuario;
import br.ufsm.poli.csi.redes.service.UDPService;
import br.ufsm.poli.csi.redes.service.UDPServiceImpl;
import br.ufsm.poli.csi.redes.service.UDPServiceMensagemListener;
import br.ufsm.poli.csi.redes.service.UDPServiceUsuarioListener;
import lombok.Getter;
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.HashSet;
import java.util.Set;

//nao mexer em nada

/**
 * 
 * User: Rafael
 * Date: 13/10/14
 * Time: 10:28
 * 
 */

/* interface grafica
* implementa as interfaces nas classes internas - MensagemListener e UsuarioListener
* recebe avisos sobre mensagens e usuarios da camada de rede
*
* JPANEL
* biblioteca de interface grafica - JFrame é a janela principal, com botões de fechar e minimizar
* JPanel vai dentro do JFrame, é um container para organizar outros componentes (botões, campos de texto, listas)
* LayoutManager organiza os componentes no espaço pelo GridBagLayout
* add(componente, constraints) = "pinte esse componente nessa tela usando essas regras de posicionamento"
* */
public class ChatClientSwing extends JFrame { //JFrame - classe base para janelas no Java Swing

    private Usuario meuUsuario; //infos do usuario local
    private JList listaChat; //componente visual - lista de usuarios
    private DefaultListModel<Usuario> dfListModel; //onde os nomes são adicionados/removidos, por trás da lista
    private JTabbedPane tabbedPane = new JTabbedPane(); //painel com abas para cada conversa
    private Set<Usuario> chatsAbertos = new HashSet<>(); //conjunto - controla quais chats privados já estão abertos (evitar duplicados)
    private UDPService udpService = new UDPServiceImpl(); // por aqui a interface pede ações de rede
    private Usuario USER_GERAL = new Usuario("Geral", null, null); //aba de chat geral (objeto especial)

    public ChatClientSwing() throws UnknownHostException { //construtor - constroi a janela
        setLayout(new GridBagLayout()); //define o layout "planilha"
        JMenuBar menuBar = new JMenuBar(); //cria a barra de menu no topo da janela
        JMenu menu = new JMenu("Status"); //cria o menu chamado Status

        // ------- Criação do menu Status -------
        ButtonGroup group = new ButtonGroup(); //apenas 1 estado pode ser selecionado por vez

        //status DISPONIVEL
        JRadioButtonMenuItem rbMenuItem = new JRadioButtonMenuItem(Usuario.StatusUsuario.DISPONIVEL.name()); //cria um item de menu selecionavel "disponivel"
        rbMenuItem.setSelected(true); //define DISPONIVEL como PADRÃO
        rbMenuItem.addActionListener(new ActionListener() { //adiciona um ActionListener (tipo um espião de cliques)
            @Override
            public void actionPerformed(ActionEvent actionEvent) { //roda quando o usuário clica no item DISPONIVEL
                ChatClientSwing.this.meuUsuario.setStatus(Usuario.StatusUsuario.DISPONIVEL); //muda o status do objeto meuUsuario
                udpService.usuarioAlterado(meuUsuario); //chama o metodo usuarioAlterado para a rede anunciar a mudança
            }
        });
        group.add(rbMenuItem); //adiciona ao grupo, para garantir seleção unica
        menu.add(rbMenuItem); //adiciona item ao menu Status

        //status NAO_PERTURBE
        rbMenuItem = new JRadioButtonMenuItem(Usuario.StatusUsuario.NAO_PERTURBE.name()); //cria um item de menu selecionavel "nao_perturbe"
        rbMenuItem.addActionListener(new ActionListener() { //adiciona um ActionListener (tipo um espião de cliques)
            @Override
            public void actionPerformed(ActionEvent actionEvent) { //roda quando o usuário clica no item NAO_PERTURBE
                ChatClientSwing.this.meuUsuario.setStatus(Usuario.StatusUsuario.NAO_PERTURBE); //muda o status do objeto meuUsuario
                udpService.usuarioAlterado(meuUsuario); //chama o metodo usuarioAlterado para a rede anunciar a mudança
            }
        });
        group.add(rbMenuItem); //adiciona ao grupo, para garantir seleção unica
        menu.add(rbMenuItem); //adiciona item ao menu Status

        //status VOLTO_LOGO
        rbMenuItem = new JRadioButtonMenuItem(Usuario.StatusUsuario.VOLTO_LOGO.name()); //cria um item de menu selecionavel "volto_logo"
        rbMenuItem.addActionListener(new ActionListener() { //adiciona um ActionListener (tipo um espião de cliques)
            @Override
            public void actionPerformed(ActionEvent actionEvent) { //roda quando o usuário clica no item VOLTO_LOGO
                ChatClientSwing.this.meuUsuario.setStatus(Usuario.StatusUsuario.VOLTO_LOGO); //muda o status do objeto meuUsuario
                udpService.usuarioAlterado(meuUsuario); //chama o metodo usuarioAlterado para a rede anunciar a mudança
            }
        });
        group.add(rbMenuItem); //adiciona ao grupo, para garantir seleção unica
        menu.add(rbMenuItem); //adiciona item ao menu Status


        menuBar.add(menu);
        this.setJMenuBar(menuBar); //instala a barra de menu na janela


        // ------- Fechar abas com o otão direito do mouse -------
        tabbedPane.addMouseListener(new MouseAdapter() { //adiciona um MouseListener (tipo um espião de cliques so que do mouse)
            @Override
            public void mousePressed(MouseEvent e) { //roda quando o mouse é pressionado sobre as abas
                super.mousePressed(e);
                if (e.getButton() == MouseEvent.BUTTON3) { //se for o botão direito do mouse
                    // --- cria um menu pop-up com a opção Fechar ---
                    JPopupMenu popupMenu =  new JPopupMenu();
                    final int tab = tabbedPane.getUI().tabForCoordinate(tabbedPane, e.getX(), e.getY());
                    JMenuItem item = new JMenuItem("Fechar");
                    item.addActionListener(new ActionListener() {
                        @Override
                        public void actionPerformed(ActionEvent e) {
                            PainelChatPVT painel = (PainelChatPVT) tabbedPane.getTabComponentAt(tab);
                            tabbedPane.remove(tab);
                            chatsAbertos.remove(painel.getUsuario());
                        }
                    });
                    popupMenu.add(item);
                    popupMenu.show(e.getComponent(), e.getX(), e.getY());
                }
            }
        });


        // ------- Montagem da janela, tipo um CSS -------
        //adiciona a lista de usuarios a esquerda e as abas de chat a direita na janela, pelo GridBagLayout
        add(new JScrollPane(criaLista()), new GridBagConstraints(0, 0, 1, 1, 0.1, 1, GridBagConstraints.WEST, GridBagConstraints.BOTH, new Insets(0, 0, 0, 0), 0, 0));
        add(tabbedPane, new GridBagConstraints(1, 0, 1, 1, 1, 1, GridBagConstraints.EAST, GridBagConstraints.BOTH, new Insets(0, 0, 0, 0), 0, 0));

        //define o tamanho da janela
        setSize(800, 600);

        //centraliza a janela na tela
        final Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        final int x = (screenSize.width - this.getWidth()) / 2;
        final int y = (screenSize.height - this.getHeight()) / 2;
        this.setLocation(x, y);


        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); //programa fecha quando clica no X
        setTitle("Chat P2P - Redes de Computadores"); //titulo da janela


        // ------- Inicialização do chat -------
        String nomeUsuario = JOptionPane.showInputDialog(this, "Digite seu nome de usuario: "); //pede o nome do usuário
        this.meuUsuario = new Usuario(nomeUsuario, Usuario.StatusUsuario.DISPONIVEL, InetAddress.getLocalHost()); //cria objeto meuUsuario com nome, status padrão e IP local
        udpService.usuarioAlterado(meuUsuario); //anuncia a propria presença na rede

        //conexão das camadas
        udpService.addListenerMensagem(new MensagemListener()); //entrega o 'comunicador de mensagens' para a camada de serviço
        udpService.addListenerUsuario(new UsuarioListener()); //entrega o 'comunicador de usuarios' para a camada de serviço
        setVisible(true); //deixa a janela visivel
    }


    private JComponent criaLista() {
        dfListModel = new DefaultListModel();
        //dfListModel.addElement(new Usuario("Fulano", Usuario.StatusUsuario.NAO_PERTURBE, null));
        //dfListModel.addElement(new Usuario("Cicrano", Usuario.StatusUsuario.DISPONIVEL, null));
        listaChat = new JList(dfListModel);
        listaChat.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                JList list = (JList) evt.getSource();
                if (evt.getClickCount() == 2) {
                    int index = list.locationToIndex(evt.getPoint());
                    Usuario user = (Usuario) list.getModel().getElementAt(index);
                    if (chatsAbertos.add(user)) {
                        tabbedPane.add(user.toString(), new PainelChatPVT(user, false));
                    }
                }
            }
        });
        chatsAbertos.add(USER_GERAL);
        tabbedPane.add("Geral", new PainelChatPVT(USER_GERAL, true));
        return listaChat;
    }


    // ----- classes internas -----
    @Getter
    class PainelChatPVT extends JPanel { //molde para cada aba de chat

        JTextArea areaChat;
        JTextField campoEntrada;
        Usuario usuario;
        boolean chatGeral = false;

        PainelChatPVT(Usuario usuario, boolean chatGeral) { //construtor - monta a aparencia de uma aba
            setLayout(new GridBagLayout());
            areaChat = new JTextArea(); //area de texto
            this.usuario = usuario;
            areaChat.setEditable(false); //nao editavel
            campoEntrada = new JTextField(); //campo de texto
            this.chatGeral = chatGeral;
            campoEntrada.addActionListener(new ActionListener() { //"espião" (Listener) do campo de texto
                @Override
                public void actionPerformed(ActionEvent e) { //roda quando o usuario digita uma mensagem e aperta Enter
                    ((JTextField) e.getSource()).setText(""); //limpa o campo de texto
                    areaChat.append(meuUsuario.getNome() + "> " + e.getActionCommand() + "\n"); //adiciona a propria mensagem na propria tela
                    udpService.enviarMensagem(e.getActionCommand(), usuario, chatGeral); //pede para a camada de rede enviar a mensagem ao destinatario
                    //fluxo de dados de saída
                }
            });
            add(new JScrollPane(areaChat), new GridBagConstraints(0, 0, 1, 1, 1, 1, GridBagConstraints.CENTER, GridBagConstraints.BOTH, new Insets(0, 0, 0, 0), 0, 0));
            add(campoEntrada, new GridBagConstraints(0, 1, 1, 1, 1, 0, GridBagConstraints.SOUTH, GridBagConstraints.BOTH, new Insets(0, 0, 0, 0), 0, 0));
        }

    }

    //implementação do "comunicador" de usuarios
    private class UsuarioListener implements UDPServiceUsuarioListener {
        /*
        os metodos nao sao chamados pela interface grafica e sim pela camada de serviço quando ela recebe um pacote UDP de status de outro usuario
        os metodos manipulam o dfListModel para adicionar, remover ou atualizar um usuario na lista na tela
         */
        @Override
        public void usuarioAdicionado(Usuario usuario) {
            dfListModel.removeElement(usuario);
            dfListModel.addElement(usuario);
        }

        @Override
        public void usuarioRemovido(Usuario usuario) {
            dfListModel.removeElement(usuario);
        }

        @Override
        public void usuarioAlterado(Usuario usuario) {
            dfListModel.removeElement(usuario);
            dfListModel.addElement(usuario);
        }
    }

    //implementação do "comunicador" de mensagens
    private class MensagemListener implements UDPServiceMensagemListener {

        @Override
        public void mensagemRecebida(String mensagem, Usuario remetente, boolean chatGeral) {
            /*
            metodo chamado pela camada de serviço quando um pacote UDP com uma mebnsagem de chat chega
            fluxo de dados de entrada
            encontra a aba de chat correta (geral ou privada) e chama painel.getAreaChat().append() para exibir a mensagem recebida na tela
             */
            PainelChatPVT painel = null;
            if (chatGeral) {
                painel = (PainelChatPVT) tabbedPane.getComponentAt(0);
            } else {
                for (int i = 1; i < tabbedPane.getTabCount(); i++) {
                    PainelChatPVT p = (PainelChatPVT) tabbedPane.getComponentAt(i);
                    if (p.getUsuario().equals(remetente)) {
                        painel = p;
                        break;
                    }
                }
            }
            if (painel != null) {
                painel.getAreaChat().append(remetente.getNome() + "> " + mensagem + "\n");
            }
        }
    }





}
.
.
